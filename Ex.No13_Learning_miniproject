# Ex.No: 10 Learning â€“ Use Supervised Learning  
### DATE: 10-10-2024                                                                           
### REGISTER NUMBER : 212222220052
### AIM: 
To write a program to train the RandomForest classifier for Car Evalution
###  Algorithm:
## STEP 1: Import the necessary libraries 
## STEP 2: Import the Dataset
## STEP 3: Preprocess the Dataset, remove all the null values and replace it with mean.
## STEP 4: Split the training and testing dataset
## STEP 5: Train the model with RandomForestClassifier
## STEP 6: Find out the accuracy and increase it if possible by increasing the number of decision trees

### Program:
{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3884,"sourceType":"datasetVersion","datasetId":2298}],"dockerImageVersionId":29852,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # data visualization\nimport seaborn as sns # statistical data visualization\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.032761Z","iopub.execute_input":"2024-10-10T03:34:09.033273Z","iopub.status.idle":"2024-10-10T03:34:09.058693Z","shell.execute_reply.started":"2024-10-10T03:34:09.033178Z","shell.execute_reply":"2024-10-10T03:34:09.057486Z"},"trusted":true},"execution_count":53,"outputs":[{"name":"stdout","text":"/kaggle/input/car-evaluation-data-set/car_evaluation.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import warnings\n\nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.060637Z","iopub.execute_input":"2024-10-10T03:34:09.060928Z","iopub.status.idle":"2024-10-10T03:34:09.065222Z","shell.execute_reply.started":"2024-10-10T03:34:09.060880Z","shell.execute_reply":"2024-10-10T03:34:09.064259Z"},"trusted":true},"execution_count":54,"outputs":[]},{"cell_type":"code","source":"data = '/kaggle/input/car-evaluation-data-set/car_evaluation.csv'\n\ndf = pd.read_csv(data, header=None)","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.066857Z","iopub.execute_input":"2024-10-10T03:34:09.067193Z","iopub.status.idle":"2024-10-10T03:34:09.082630Z","shell.execute_reply.started":"2024-10-10T03:34:09.067134Z","shell.execute_reply":"2024-10-10T03:34:09.081725Z"},"trusted":true},"execution_count":55,"outputs":[]},{"cell_type":"code","source":"# view dimensions of dataset\n\ndf.shape","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.084189Z","iopub.execute_input":"2024-10-10T03:34:09.084500Z","iopub.status.idle":"2024-10-10T03:34:09.091083Z","shell.execute_reply.started":"2024-10-10T03:34:09.084439Z","shell.execute_reply":"2024-10-10T03:34:09.089920Z"},"trusted":true},"execution_count":56,"outputs":[{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"(1728, 7)"},"metadata":{}}]},{"cell_type":"code","source":"# preview the dataset\n\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.094550Z","iopub.execute_input":"2024-10-10T03:34:09.094929Z","iopub.status.idle":"2024-10-10T03:34:09.112838Z","shell.execute_reply.started":"2024-10-10T03:34:09.094860Z","shell.execute_reply":"2024-10-10T03:34:09.111620Z"},"trusted":true},"execution_count":57,"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"       0      1  2  3      4     5      6\n0  vhigh  vhigh  2  2  small   low  unacc\n1  vhigh  vhigh  2  2  small   med  unacc\n2  vhigh  vhigh  2  2  small  high  unacc\n3  vhigh  vhigh  2  2    med   low  unacc\n4  vhigh  vhigh  2  2    med   med  unacc","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>vhigh</td>\n      <td>vhigh</td>\n      <td>2</td>\n      <td>2</td>\n      <td>small</td>\n      <td>low</td>\n      <td>unacc</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>vhigh</td>\n      <td>vhigh</td>\n      <td>2</td>\n      <td>2</td>\n      <td>small</td>\n      <td>med</td>\n      <td>unacc</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>vhigh</td>\n      <td>vhigh</td>\n      <td>2</td>\n      <td>2</td>\n      <td>small</td>\n      <td>high</td>\n      <td>unacc</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>vhigh</td>\n      <td>vhigh</td>\n      <td>2</td>\n      <td>2</td>\n      <td>med</td>\n      <td>low</td>\n      <td>unacc</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>vhigh</td>\n      <td>vhigh</td>\n      <td>2</td>\n      <td>2</td>\n      <td>med</td>\n      <td>med</td>\n      <td>unacc</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"col_names = ['buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'class']\n\n\ndf.columns = col_names\n\ncol_names","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.114901Z","iopub.execute_input":"2024-10-10T03:34:09.115298Z","iopub.status.idle":"2024-10-10T03:34:09.123906Z","shell.execute_reply.started":"2024-10-10T03:34:09.115235Z","shell.execute_reply":"2024-10-10T03:34:09.122867Z"},"trusted":true},"execution_count":58,"outputs":[{"execution_count":58,"output_type":"execute_result","data":{"text/plain":"['buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'class']"},"metadata":{}}]},{"cell_type":"code","source":"# let's again preview the dataset\n\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.125953Z","iopub.execute_input":"2024-10-10T03:34:09.126513Z","iopub.status.idle":"2024-10-10T03:34:09.146488Z","shell.execute_reply.started":"2024-10-10T03:34:09.126341Z","shell.execute_reply":"2024-10-10T03:34:09.145131Z"},"trusted":true},"execution_count":59,"outputs":[{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"  buying  maint doors persons lug_boot safety  class\n0  vhigh  vhigh     2       2    small    low  unacc\n1  vhigh  vhigh     2       2    small    med  unacc\n2  vhigh  vhigh     2       2    small   high  unacc\n3  vhigh  vhigh     2       2      med    low  unacc\n4  vhigh  vhigh     2       2      med    med  unacc","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>buying</th>\n      <th>maint</th>\n      <th>doors</th>\n      <th>persons</th>\n      <th>lug_boot</th>\n      <th>safety</th>\n      <th>class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>vhigh</td>\n      <td>vhigh</td>\n      <td>2</td>\n      <td>2</td>\n      <td>small</td>\n      <td>low</td>\n      <td>unacc</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>vhigh</td>\n      <td>vhigh</td>\n      <td>2</td>\n      <td>2</td>\n      <td>small</td>\n      <td>med</td>\n      <td>unacc</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>vhigh</td>\n      <td>vhigh</td>\n      <td>2</td>\n      <td>2</td>\n      <td>small</td>\n      <td>high</td>\n      <td>unacc</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>vhigh</td>\n      <td>vhigh</td>\n      <td>2</td>\n      <td>2</td>\n      <td>med</td>\n      <td>low</td>\n      <td>unacc</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>vhigh</td>\n      <td>vhigh</td>\n      <td>2</td>\n      <td>2</td>\n      <td>med</td>\n      <td>med</td>\n      <td>unacc</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.148273Z","iopub.execute_input":"2024-10-10T03:34:09.148592Z","iopub.status.idle":"2024-10-10T03:34:09.161362Z","shell.execute_reply.started":"2024-10-10T03:34:09.148540Z","shell.execute_reply":"2024-10-10T03:34:09.160397Z"},"trusted":true},"execution_count":60,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1728 entries, 0 to 1727\nData columns (total 7 columns):\nbuying      1728 non-null object\nmaint       1728 non-null object\ndoors       1728 non-null object\npersons     1728 non-null object\nlug_boot    1728 non-null object\nsafety      1728 non-null object\nclass       1728 non-null object\ndtypes: object(7)\nmemory usage: 94.6+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"col_names = ['buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'class']\n\n\nfor col in col_names:\n    \n    print(df[col].value_counts())   \n","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.162873Z","iopub.execute_input":"2024-10-10T03:34:09.163234Z","iopub.status.idle":"2024-10-10T03:34:09.193458Z","shell.execute_reply.started":"2024-10-10T03:34:09.163176Z","shell.execute_reply":"2024-10-10T03:34:09.192532Z"},"trusted":true},"execution_count":61,"outputs":[{"name":"stdout","text":"med      432\nlow      432\nhigh     432\nvhigh    432\nName: buying, dtype: int64\nmed      432\nlow      432\nhigh     432\nvhigh    432\nName: maint, dtype: int64\n5more    432\n4        432\n3        432\n2        432\nName: doors, dtype: int64\n4       576\n2       576\nmore    576\nName: persons, dtype: int64\nmed      576\nbig      576\nsmall    576\nName: lug_boot, dtype: int64\nmed     576\nlow     576\nhigh    576\nName: safety, dtype: int64\nunacc    1210\nacc       384\ngood       69\nvgood      65\nName: class, dtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"df['class'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.194815Z","iopub.execute_input":"2024-10-10T03:34:09.195137Z","iopub.status.idle":"2024-10-10T03:34:09.204304Z","shell.execute_reply.started":"2024-10-10T03:34:09.195082Z","shell.execute_reply":"2024-10-10T03:34:09.203361Z"},"trusted":true},"execution_count":62,"outputs":[{"execution_count":62,"output_type":"execute_result","data":{"text/plain":"unacc    1210\nacc       384\ngood       69\nvgood      65\nName: class, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"# check missing values in variables\n\ndf.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.206018Z","iopub.execute_input":"2024-10-10T03:34:09.206340Z","iopub.status.idle":"2024-10-10T03:34:09.220801Z","shell.execute_reply.started":"2024-10-10T03:34:09.206276Z","shell.execute_reply":"2024-10-10T03:34:09.219564Z"},"trusted":true},"execution_count":63,"outputs":[{"execution_count":63,"output_type":"execute_result","data":{"text/plain":"buying      0\nmaint       0\ndoors       0\npersons     0\nlug_boot    0\nsafety      0\nclass       0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"X = df.drop(['class'], axis=1)\n\ny = df['class']","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.222848Z","iopub.execute_input":"2024-10-10T03:34:09.223326Z","iopub.status.idle":"2024-10-10T03:34:09.232189Z","shell.execute_reply.started":"2024-10-10T03:34:09.223253Z","shell.execute_reply":"2024-10-10T03:34:09.231293Z"},"trusted":true},"execution_count":64,"outputs":[]},{"cell_type":"code","source":"# split data into training and testing sets\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.242242Z","iopub.execute_input":"2024-10-10T03:34:09.242609Z","iopub.status.idle":"2024-10-10T03:34:09.253407Z","shell.execute_reply.started":"2024-10-10T03:34:09.242556Z","shell.execute_reply":"2024-10-10T03:34:09.252041Z"},"trusted":true},"execution_count":65,"outputs":[]},{"cell_type":"code","source":"# check the shape of X_train and X_test\n\nX_train.shape, X_test.shape","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.255702Z","iopub.execute_input":"2024-10-10T03:34:09.256161Z","iopub.status.idle":"2024-10-10T03:34:09.266190Z","shell.execute_reply.started":"2024-10-10T03:34:09.256067Z","shell.execute_reply":"2024-10-10T03:34:09.265285Z"},"trusted":true},"execution_count":66,"outputs":[{"execution_count":66,"output_type":"execute_result","data":{"text/plain":"((1157, 6), (571, 6))"},"metadata":{}}]},{"cell_type":"code","source":"# check data types in X_train\n\nX_train.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.268456Z","iopub.execute_input":"2024-10-10T03:34:09.268964Z","iopub.status.idle":"2024-10-10T03:34:09.281257Z","shell.execute_reply.started":"2024-10-10T03:34:09.268747Z","shell.execute_reply":"2024-10-10T03:34:09.280105Z"},"trusted":true},"execution_count":67,"outputs":[{"execution_count":67,"output_type":"execute_result","data":{"text/plain":"buying      object\nmaint       object\ndoors       object\npersons     object\nlug_boot    object\nsafety      object\ndtype: object"},"metadata":{}}]},{"cell_type":"code","source":"X_train.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.283361Z","iopub.execute_input":"2024-10-10T03:34:09.283701Z","iopub.status.idle":"2024-10-10T03:34:09.305300Z","shell.execute_reply.started":"2024-10-10T03:34:09.283643Z","shell.execute_reply":"2024-10-10T03:34:09.303910Z"},"trusted":true},"execution_count":68,"outputs":[{"execution_count":68,"output_type":"execute_result","data":{"text/plain":"     buying  maint  doors persons lug_boot safety\n48    vhigh  vhigh      3    more      med    low\n468    high  vhigh      3       4    small    low\n155   vhigh   high      3    more    small   high\n1721    low    low  5more    more    small   high\n1208    med    low      2    more    small   high","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>buying</th>\n      <th>maint</th>\n      <th>doors</th>\n      <th>persons</th>\n      <th>lug_boot</th>\n      <th>safety</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>48</th>\n      <td>vhigh</td>\n      <td>vhigh</td>\n      <td>3</td>\n      <td>more</td>\n      <td>med</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>468</th>\n      <td>high</td>\n      <td>vhigh</td>\n      <td>3</td>\n      <td>4</td>\n      <td>small</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>155</th>\n      <td>vhigh</td>\n      <td>high</td>\n      <td>3</td>\n      <td>more</td>\n      <td>small</td>\n      <td>high</td>\n    </tr>\n    <tr>\n      <th>1721</th>\n      <td>low</td>\n      <td>low</td>\n      <td>5more</td>\n      <td>more</td>\n      <td>small</td>\n      <td>high</td>\n    </tr>\n    <tr>\n      <th>1208</th>\n      <td>med</td>\n      <td>low</td>\n      <td>2</td>\n      <td>more</td>\n      <td>small</td>\n      <td>high</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# import category encoders\n\nimport category_encoders as ce","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.309816Z","iopub.execute_input":"2024-10-10T03:34:09.310441Z","iopub.status.idle":"2024-10-10T03:34:09.316285Z","shell.execute_reply.started":"2024-10-10T03:34:09.310148Z","shell.execute_reply":"2024-10-10T03:34:09.315167Z"},"trusted":true},"execution_count":69,"outputs":[]},{"cell_type":"code","source":"# encode categorical variables with ordinal encoding\n\nencoder = ce.OrdinalEncoder(cols=['buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety'])\n\n\nX_train = encoder.fit_transform(X_train)\n\nX_test = encoder.transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.318780Z","iopub.execute_input":"2024-10-10T03:34:09.319168Z","iopub.status.idle":"2024-10-10T03:34:09.377408Z","shell.execute_reply.started":"2024-10-10T03:34:09.319103Z","shell.execute_reply":"2024-10-10T03:34:09.376594Z"},"trusted":true},"execution_count":70,"outputs":[]},{"cell_type":"code","source":"X_train.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.379339Z","iopub.execute_input":"2024-10-10T03:34:09.379859Z","iopub.status.idle":"2024-10-10T03:34:09.394511Z","shell.execute_reply.started":"2024-10-10T03:34:09.379674Z","shell.execute_reply":"2024-10-10T03:34:09.393198Z"},"trusted":true},"execution_count":71,"outputs":[{"execution_count":71,"output_type":"execute_result","data":{"text/plain":"      buying  maint  doors  persons  lug_boot  safety\n48         1      1      1        1         1       1\n468        2      1      1        2         2       1\n155        1      2      1        1         2       2\n1721       3      3      2        1         2       2\n1208       4      3      3        1         2       2","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>buying</th>\n      <th>maint</th>\n      <th>doors</th>\n      <th>persons</th>\n      <th>lug_boot</th>\n      <th>safety</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>48</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>468</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>155</th>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1721</th>\n      <td>3</td>\n      <td>3</td>\n      <td>2</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1208</th>\n      <td>4</td>\n      <td>3</td>\n      <td>3</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"X_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.396372Z","iopub.execute_input":"2024-10-10T03:34:09.396802Z","iopub.status.idle":"2024-10-10T03:34:09.412862Z","shell.execute_reply.started":"2024-10-10T03:34:09.396731Z","shell.execute_reply":"2024-10-10T03:34:09.411685Z"},"trusted":true},"execution_count":72,"outputs":[{"execution_count":72,"output_type":"execute_result","data":{"text/plain":"      buying  maint  doors  persons  lug_boot  safety\n599        2      2      4        3         1       2\n1201       4      3      3        2         1       3\n628        2      2      2        3         3       3\n1498       3      2      2        2         1       3\n1263       4      3      4        1         1       1","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>buying</th>\n      <th>maint</th>\n      <th>doors</th>\n      <th>persons</th>\n      <th>lug_boot</th>\n      <th>safety</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>599</th>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>3</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1201</th>\n      <td>4</td>\n      <td>3</td>\n      <td>3</td>\n      <td>2</td>\n      <td>1</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>628</th>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>1498</th>\n      <td>3</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>1263</th>\n      <td>4</td>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# import Random Forest classifier\n\nfrom sklearn.ensemble import RandomForestClassifier\n\n\n\n# instantiate the classifier \n\nrfc = RandomForestClassifier(random_state=0)\n\n\n\n# fit the model\n\nrfc.fit(X_train, y_train)\n\n\n\n# Predict the Test set results\n\ny_pred = rfc.predict(X_test)\n\n\n\n# Check accuracy score \n\nfrom sklearn.metrics import accuracy_score\n\nprint('Model accuracy score with 10 decision-trees : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.414618Z","iopub.execute_input":"2024-10-10T03:34:09.415159Z","iopub.status.idle":"2024-10-10T03:34:09.463881Z","shell.execute_reply.started":"2024-10-10T03:34:09.415090Z","shell.execute_reply":"2024-10-10T03:34:09.462843Z"},"trusted":true},"execution_count":73,"outputs":[{"name":"stdout","text":"Model accuracy score with 10 decision-trees : 0.9247\n","output_type":"stream"}]},{"cell_type":"code","source":"# instantiate the classifier with n_estimators = 100\n\nrfc_100 = RandomForestClassifier(n_estimators=100, random_state=0)\n\n\n\n# fit the model to the training set\n\nrfc_100.fit(X_train, y_train)\n\n\n\n# Predict on the test set results\n\ny_pred_100 = rfc_100.predict(X_test)\n\n\n\n# Check accuracy score \n\nprint('Model accuracy score with 100 decision-trees : {0:0.4f}'. format(accuracy_score(y_test, y_pred_100)))","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.465489Z","iopub.execute_input":"2024-10-10T03:34:09.465787Z","iopub.status.idle":"2024-10-10T03:34:09.754664Z","shell.execute_reply.started":"2024-10-10T03:34:09.465739Z","shell.execute_reply":"2024-10-10T03:34:09.753735Z"},"trusted":true},"execution_count":74,"outputs":[{"name":"stdout","text":"Model accuracy score with 100 decision-trees : 0.9457\n","output_type":"stream"}]},{"cell_type":"code","source":"# create the classifier with n_estimators = 100\n\nclf = RandomForestClassifier(n_estimators=100, random_state=0)\n\n\n\n# fit the model to the training set\n\nclf.fit(X_train, y_train)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:09.756302Z","iopub.execute_input":"2024-10-10T03:34:09.756587Z","iopub.status.idle":"2024-10-10T03:34:10.029174Z","shell.execute_reply.started":"2024-10-10T03:34:09.756542Z","shell.execute_reply":"2024-10-10T03:34:10.028113Z"},"trusted":true},"execution_count":75,"outputs":[{"execution_count":75,"output_type":"execute_result","data":{"text/plain":"RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n                       max_depth=None, max_features='auto', max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, n_estimators=100,\n                       n_jobs=None, oob_score=False, random_state=0, verbose=0,\n                       warm_start=False)"},"metadata":{}}]},{"cell_type":"code","source":"# view the feature scores\n\nfeature_scores = pd.Series(clf.feature_importances_, index=X_train.columns).sort_values(ascending=False)\n\nfeature_scores","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-10-10T03:34:10.030747Z","iopub.execute_input":"2024-10-10T03:34:10.031154Z","iopub.status.idle":"2024-10-10T03:34:10.055824Z","shell.execute_reply.started":"2024-10-10T03:34:10.031083Z","shell.execute_reply":"2024-10-10T03:34:10.054418Z"},"trusted":true},"execution_count":76,"outputs":[{"execution_count":76,"output_type":"execute_result","data":{"text/plain":"safety      0.295319\npersons     0.233856\nbuying      0.151734\nmaint       0.146653\nlug_boot    0.100048\ndoors       0.072389\ndtype: float64"},"metadata":{}}]},{"cell_type":"markdown","source":"We can see that the most important feature is `safety` and least important feature is `doors`.","metadata":{}},{"cell_type":"code","source":"# Creating a seaborn bar plot\n\nsns.barplot(x=feature_scores, y=feature_scores.index)\n\n\n\n# Add labels to the graph\n\nplt.xlabel('Feature Importance Score')\n\nplt.ylabel('Features')\n\n\n\n# Add title to the graph\n\nplt.title(\"Visualizing Important Features\")\n\n\n\n# Visualize the graph\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:10.057547Z","iopub.execute_input":"2024-10-10T03:34:10.058076Z","iopub.status.idle":"2024-10-10T03:34:10.372772Z","shell.execute_reply.started":"2024-10-10T03:34:10.057876Z","shell.execute_reply":"2024-10-10T03:34:10.371450Z"},"trusted":true},"execution_count":77,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"# declare feature vector and target variable\n\nX = df.drop(['class', 'doors'], axis=1)\n\ny = df['class']","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:10.374458Z","iopub.execute_input":"2024-10-10T03:34:10.374967Z","iopub.status.idle":"2024-10-10T03:34:10.384201Z","shell.execute_reply.started":"2024-10-10T03:34:10.374907Z","shell.execute_reply":"2024-10-10T03:34:10.382079Z"},"trusted":true},"execution_count":78,"outputs":[]},{"cell_type":"code","source":"# split data into training and testing sets\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:10.386655Z","iopub.execute_input":"2024-10-10T03:34:10.387543Z","iopub.status.idle":"2024-10-10T03:34:10.402741Z","shell.execute_reply.started":"2024-10-10T03:34:10.387475Z","shell.execute_reply":"2024-10-10T03:34:10.401522Z"},"trusted":true},"execution_count":79,"outputs":[]},{"cell_type":"markdown","source":"Now, I will build the random forest model and check accuracy.","metadata":{}},{"cell_type":"code","source":"# encode categorical variables with ordinal encoding\n\nencoder = ce.OrdinalEncoder(cols=['buying', 'maint', 'persons', 'lug_boot', 'safety'])\n\n\nX_train = encoder.fit_transform(X_train)\n\nX_test = encoder.transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:10.404521Z","iopub.execute_input":"2024-10-10T03:34:10.405136Z","iopub.status.idle":"2024-10-10T03:34:10.473460Z","shell.execute_reply.started":"2024-10-10T03:34:10.405073Z","shell.execute_reply":"2024-10-10T03:34:10.472409Z"},"trusted":true},"execution_count":80,"outputs":[]},{"cell_type":"code","source":"# instantiate the classifier with n_estimators = 100\n\nclf = RandomForestClassifier(random_state=0)\n\n\n\n# fit the model to the training set\n\nclf.fit(X_train, y_train)\n\n\n# Predict on the test set results\n\ny_pred = clf.predict(X_test)\n\n\n\n# Check accuracy score \n\nprint('Model accuracy score with doors variable removed : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))\n","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:10.475017Z","iopub.execute_input":"2024-10-10T03:34:10.475347Z","iopub.status.idle":"2024-10-10T03:34:10.522219Z","shell.execute_reply.started":"2024-10-10T03:34:10.475287Z","shell.execute_reply":"2024-10-10T03:34:10.521192Z"},"trusted":true},"execution_count":81,"outputs":[{"name":"stdout","text":"Model accuracy score with doors variable removed : 0.9264\n","output_type":"stream"}]},{"cell_type":"markdown","source":"I have removed the `doors` variable from the model, rebuild it and checked its accuracy. The accuracy of the model with `doors` variable removed is 0.9264. The accuracy of the model with all the variables taken into account is 0.9247. So, we can see that the model accuracy has been improved with `doors` variable removed from the model.\n\nFurthermore, the second least important model is `lug_boot`. If I remove it from the model and rebuild the model, then the accuracy was found to be 0.8546. It is a significant drop in the accuracy. So, I will not drop it from the model.","metadata":{}},{"cell_type":"markdown","source":"Now, based on the above analysis we can conclude that our classification model accuracy is very good. Our model is doing a very good job in terms of predicting the class labels.\n\n\nBut, it does not give the underlying distribution of values. Also, it does not tell anything about the type of errors our classifer is making. \n\n\nWe have another tool called `Confusion matrix` that comes to our rescue.","metadata":{}},{"cell_type":"markdown","source":"# **18. Confusion matrix** <a class=\"anchor\" id=\"18\"></a>\n\n[Table of Contents](#0.1)\n\n\n\nA confusion matrix is a tool for summarizing the performance of a classification algorithm. A confusion matrix will give us a clear picture of classification model performance and the types of errors produced by the model. It gives us a summary of correct and incorrect predictions broken down by each category. The summary is represented in a tabular form.\n\n\nFour types of outcomes are possible while evaluating a classification model performance. These four outcomes are described below:-\n\n\n**True Positives (TP)** â€“ True Positives occur when we predict an observation belongs to a certain class and the observation actually belongs to that class.\n\n\n**True Negatives (TN)** â€“ True Negatives occur when we predict an observation does not belong to a certain class and the observation actually does not belong to that class.\n\n\n**False Positives (FP)** â€“ False Positives occur when we predict an observation belongs to a    certain class but the observation actually does not belong to that class. This type of error is called **Type I error.**\n\n\n\n**False Negatives (FN)** â€“ False Negatives occur when we predict an observation does not belong to a certain class but the observation actually belongs to that class. This is a very serious error and it is called **Type II error.**\n\n\n\nThese four outcomes are summarized in a confusion matrix given below.\n","metadata":{}},{"cell_type":"code","source":"# Print the Confusion Matrix and slice it into four pieces\n\nfrom sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_test, y_pred)\n\nprint('Confusion matrix\\n\\n', cm)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:10.523911Z","iopub.execute_input":"2024-10-10T03:34:10.524330Z","iopub.status.idle":"2024-10-10T03:34:10.535285Z","shell.execute_reply.started":"2024-10-10T03:34:10.524260Z","shell.execute_reply":"2024-10-10T03:34:10.534096Z"},"trusted":true},"execution_count":82,"outputs":[{"name":"stdout","text":"Confusion matrix\n\n [[107   8   7   7]\n [  0  17   1   2]\n [ 10   0 387   0]\n [  3   4   0  18]]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# **19. Classification Report** <a class=\"anchor\" id=\"19\"></a>\n\n[Table of Contents](#0.1)\n\n\n**Classification report** is another way to evaluate the classification model performance. It displays the  **precision**, **recall**, **f1** and **support** scores for the model. I have described these terms in later.\n\nWe can print a classification report as follows:-","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test, y_pred))","metadata":{"execution":{"iopub.status.busy":"2024-10-10T03:34:10.537063Z","iopub.execute_input":"2024-10-10T03:34:10.537475Z","iopub.status.idle":"2024-10-10T03:34:10.573575Z","shell.execute_reply.started":"2024-10-10T03:34:10.537402Z","shell.execute_reply":"2024-10-10T03:34:10.572685Z"},"trusted":true},"execution_count":83,"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n         acc       0.89      0.83      0.86       129\n        good       0.59      0.85      0.69        20\n       unacc       0.98      0.97      0.98       397\n       vgood       0.67      0.72      0.69        25\n\n    accuracy                           0.93       571\n   macro avg       0.78      0.84      0.81       571\nweighted avg       0.93      0.93      0.93       571\n\n","output_type":"stream"}]}]}



### Output:


### Result:
Thus the system was trained successfully and the prediction was carried out.
